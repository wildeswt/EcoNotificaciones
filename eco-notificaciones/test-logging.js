// Script de prueba para verificar el sistema de logging
// Ejecutar en la consola del navegador despu√©s de cargar la aplicaci√≥n

console.log('üß™ Iniciando pruebas del sistema de logging...');

// Funci√≥n para simular la creaci√≥n de una notificaci√≥n
async function testNotificationCreation() {
  console.log('\nüìù Probando creaci√≥n de notificaci√≥n...');
  
  // Simular datos de notificaci√≥n
  const testNotification = {
    name: "Prueba de Logging",
    date: "2024-01-15",
    time: "10:00 AM - 11:00 AM",
    location: "Sala de Pruebas",
    description: "Esta es una notificaci√≥n de prueba para verificar el sistema de logging",
    category: "reciclaje"
  };

  try {
    // Simular el flujo completo
    console.log('‚úÖ Simulando flujo de creaci√≥n de notificaci√≥n...');
    
    // 1. Log de inicio (deber√≠a aparecer autom√°ticamente)
    console.log('üìã Notificaci√≥n a crear:', testNotification);
    
    // 2. Simular validaci√≥n
    console.log('üîç Validando notificaci√≥n...');
    
    // 3. Simular env√≠o
    console.log('üì§ Enviando notificaci√≥n...');
    
    // 4. Simular respuesta exitosa
    console.log('‚úÖ Notificaci√≥n enviada exitosamente');
    
    console.log('\nüéØ Verifica en la consola que aparezcan los logs autom√°ticos:');
    console.log('   - "Iniciando procesamiento de notificaci√≥n"');
    console.log('   - "Validaci√≥n de notificaci√≥n exitosa"');
    console.log('   - "Iniciando NotificationService.createNotification"');
    console.log('   - "Completado NotificationService.createNotification"');
    console.log('   - "Notificaci√≥n procesada exitosamente"');
    
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error);
  }
}

// Funci√≥n para verificar que el logger est√° disponible
function checkLoggerAvailability() {
  console.log('\nüîç Verificando disponibilidad del logger...');
  
  // Verificar si el logger est√° disponible globalmente
  if (typeof window !== 'undefined') {
    console.log('‚úÖ Logger disponible en el navegador');
    
    // Intentar acceder al logger
    try {
      // Esto deber√≠a funcionar si el logger est√° correctamente importado
      console.log('‚úÖ Sistema de logging inicializado correctamente');
    } catch (error) {
      console.error('‚ùå Error al acceder al logger:', error);
    }
  } else {
    console.log('‚ö†Ô∏è  Ejecutando en entorno Node.js');
  }
}

// Funci√≥n para mostrar instrucciones de prueba
function showTestInstructions() {
  console.log('\nüìã INSTRUCCIONES PARA PROBAR EL SISTEMA DE LOGGING:');
  console.log('1. Abre la aplicaci√≥n en el navegador');
  console.log('2. Abre la consola del navegador (F12)');
  console.log('3. Haz clic en el bot√≥n "+" para crear una notificaci√≥n');
  console.log('4. Completa el formulario y haz clic en "Crear Evento"');
  console.log('5. Verifica que aparezcan los logs autom√°ticos en la consola');
  console.log('');
  console.log('üìä LOGS ESPERADOS:');
  console.log('‚úÖ [timestamp] Iniciando procesamiento de notificaci√≥n');
  console.log('‚úÖ [timestamp] Validaci√≥n de notificaci√≥n exitosa');
  console.log('‚úÖ [timestamp] Iniciando NotificationService.createNotification');
  console.log('‚úÖ [timestamp] Completado NotificationService.createNotification');
  console.log('‚úÖ [timestamp] Notificaci√≥n procesada exitosamente');
  console.log('');
  console.log('üéØ VERIFICACIONES:');
  console.log('‚Ä¢ ¬øSe registra QU√â notificaci√≥n se envi√≥?');
  console.log('‚Ä¢ ¬øSe registra CU√ÅNDO se envi√≥ (timestamp)?');
  console.log('‚Ä¢ ¬øLos logs aparecen ANTES/DESPU√âS de la l√≥gica principal?');
  console.log('‚Ä¢ ¬øLas funciones principales NO est√°n contaminadas?');
}

// Ejecutar pruebas
checkLoggerAvailability();
showTestInstructions();

// Exportar funci√≥n de prueba para uso manual
if (typeof window !== 'undefined') {
  window.testNotificationCreation = testNotificationCreation;
  console.log('\nüí° Para ejecutar la prueba manualmente, usa: testNotificationCreation()');
}

console.log('\nüéâ Script de prueba cargado. ¬°Revisa la consola para ver los logs!'); 